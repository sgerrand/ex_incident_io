name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  coverage:
    name: Code coverage (Elixir ${{matrix.elixir}} / OTP ${{matrix.otp}})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['26.2']
        elixir: ['1.16']

    env:
      MIX_ENV: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          _build
          deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-
    - name: Install and compile dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: mix do deps.get --only test, deps.compile
    - name: Compile code
      run: mix compile
    - name: Generate code coverage
      run: mix coveralls.lcov
    - name: Upload coverage reports to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  credo:
    name: Static analysis (Elixir ${{matrix.elixir}} / OTP ${{matrix.otp}})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['26.2']
        elixir: ['1.16']

    env:
      MIX_ENV: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          _build
          deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-
    - name: Install and compile dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: mix do deps.get --only test, deps.compile
    - name: Compile code
      run: mix compile
    - name: Run static analysis
      run: mix credo

  test:
    name: Tests (Elixir ${{matrix.elixir}} / OTP ${{matrix.otp}})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['24.3', '25.3', '26.2']
        elixir: ['1.15', '1.16']

    env:
      MIX_ENV: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          _build
          deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-
    - name: Install and compile dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: mix do deps.get --only test, deps.compile
    - name: Compile code
      run: mix compile
    - name: Run tests
      run: mix test

  validate:
    name: Validate code (Elixir ${{matrix.elixir}} / OTP ${{matrix.otp}})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        otp: ['26.2']
        elixir: ['1.16']

    env:
      MIX_ENV: test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{matrix.elixir}}
        otp-version: ${{matrix.otp}}
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          _build
          deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-
    - name: Install and compile dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: mix do deps.get --only test, deps.compile
    - name: Compile code
      run: mix compile
    - name: Check code format
      run: mix format --check-formatted
